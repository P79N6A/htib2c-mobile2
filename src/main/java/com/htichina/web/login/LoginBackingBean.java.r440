package com.htichina.web.login;

import java.io.Serializable;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.htichina.common.web.LoginFilter;
import com.htichina.model.user.User;
import com.htichina.service.user.UserService;
import com.htichina.web.business.BalanceAdjustBean;
import com.htichina.web.common.B2CUtils;

@Component
@Scope("session")
public class LoginBackingBean implements Serializable {
	private static final long serialVersionUID = 5613046738984156992L;

	private String userId;
	private String password;

	private User currentUser;
	private boolean sdauthorized = false;
	private boolean adauthorized = false;
	private boolean fauthorized = false;
    private boolean agent2Authorized = false;

	@Autowired
	private UserService userService;

	@Autowired
	private BalanceAdjustBean bab;

	public String login() {

		currentUser = userService.queryCurrentLoginUser(userId, password);
		FacesContext context = FacesContext.getCurrentInstance();
		if (null == currentUser) {
			context.addMessage("loginform", new FacesMessage(
					FacesMessage.SEVERITY_ERROR, "Invalid userId or password!",
					"Invalid userId or password!"));
			return "";
		} else {

			context.getExternalContext().getSessionMap()
					.put(LoginFilter.CURRENT_USER, currentUser);
			bab.roleset();
			return "/views/start?faces-redirect=true";
		}

	}

	public String logout() {
		FacesContext fc = FacesContext.getCurrentInstance();
		HttpSession Session = (HttpSession) fc.getExternalContext().getSession(
				false);
		Session.invalidate();
		resetUser();
		return "/views/login/login?faces-redirect=true";
	}

	public String getUserId() {
		return userId;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public User getCurrentUser() {
		return currentUser;
	}

	public void setCurrentUser(User currentUser) {
		this.currentUser = currentUser;
	}

	public boolean isFauthorized() {
		if (currentUser != null) {
			this.fauthorized = currentUser.getRole().equals(
					B2CUtils.getPropertyFromFile("FINANCE_ROLE"));
		}
		return fauthorized;
	}

	public void setFauthorized(boolean fauthorized) {
		this.fauthorized = fauthorized;
	}

	public boolean isSdauthorized() {
		if (currentUser != null) {
			this.sdauthorized = currentUser.getRole().equals(
					B2CUtils.getPropertyFromFile("SD_ROLE"));
		}
		return sdauthorized;
	}

	public void setSdauthorized(boolean sdauthorized) {
		this.sdauthorized = sdauthorized;
	}

	public boolean isAdauthorized() {
		if (currentUser != null) {
			this.adauthorized = currentUser.getRole().equals(
					B2CUtils.getPropertyFromFile("ADMIN_ROLE"));
		}
		return adauthorized;
	}

	public void setAdauthorized(boolean adauthorized) {
		this.adauthorized = adauthorized;
	}

    public boolean isAgent2Authorized() {
        if (currentUser != null) {
            this.agent2Authorized = currentUser.getRole().equals(
                    B2CUtils.getPropertyFromFile("AGENT2_ROLE"));
        }
        return agent2Authorized;
    }

    public void setAgent2Authorized(boolean agent2Authorized) {
        this.agent2Authorized = agent2Authorized;
    }

    public void resetUser() {
		userId = "";
		password = "";
		currentUser = null;
	}
}
